#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
sslc <- ldply(lapply(Files[4], read.csv))
View(sslc)
View(sslc)
sslc <- ldply(lapply(Files[4], read.csv))[,-c(1,3:5)]
View(sslc)
colnames(sslc)[1] <- "taluk"
ssa <- ldply(lapply(Files[2], read.csv))
View(ssa)
list.ssc <- split(ssa, acyear, drop = TRUE)
View(ssa)
list.ssc <- split(ssa, ssa$acyear, drop = TRUE)
ssa <- ldply(lapply(Files[2], read.csv))
View(ssa)
ssa <- ldply(lapply(Files[2], read.csv))[-1]
taluk.all <- unique(ssa[,1])
sslc <- droplevels(subset(sslc, eval(is.element(sslc$taluk, taluk.all))))
View(sslc)
View(ssa)
source('D:/Share Point/OneDrive/GitHub/greek-salad/DataPrep2.R')
Dataset <- data.frame(merge(sslc, ssa, by = "Block_Name"))
View(Dataset)
source('D:/Share Point/OneDrive/GitHub/greek-salad/DataPrep2.R')
Dataset <- data.frame(merge(sslc, ssa, by = c("Block_Name", "acyear"))
Dataset <- data.frame(merge(sslc, ssa, by = c("Block_Name", "acyear")))
Dataset <- data.frame(merge(sslc, ssa, by = c("Block_Name", "acyear")))
?merge
Dataset <- data.frame(merge(sslc, ssa, by.x = "Block_Name", by.y = "acyear"))
View(Dataset)
Dataset <- data.frame(merge(sslc, ssa, by.x = "Block_Name", by.y = "acyear"))
Dataset <- data.frame(merge(sslc, ssa, by.x = c("Block_Name", "acyear"), by.y = c("Block_Name", "acyear")))
View(sslc)
Dataset <- data.frame(merge(sslc, ssa, by.x = c("Block_Name", "Year"), by.y = c("Block_Name", "acyear")))
View(Dataset)
Dataset <- data.frame(merge(sslc, ssa, by.x = c("Block_Name", "Year"), by.y = c("Block_Name", "acyear")))[,-10]
View(Dataset)
unique(Dataset$Dist_Name)
write.csv(Dataset, "timey-wimey.csv")
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
sslc <- ldply(lapply(Files[5], read.csv))[,-1]
View(sslc)
Files <- list.files(pattern = "*.csv")
Files
fit.total <- lm(total ~ split*Year, Data = timey-wimey)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
timey-wimey <- ldply(lapply(Files[5], read.csv))[,-1]
fit.total <- lm(total ~ split*Year, Data = timey-wimey)
timey-wimey <- ldply(lapply(Files[5], read.csv))[,-1]
timey-wimey <- ldply(lapply(Files[5], read.csv))[,-1]
Data <- ldply(lapply(Files[5], read.csv))[,-1]
fit.total <- lm(total ~ split*Year, Data)
View(Data)
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
View(Data)
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
stargazer(fit.total)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[5], read.csv))[,-1]
View(Data)
View(Data)
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
View(Summ)
Summ <- droplevels(subset(Summ, eval(Year == 2005)))
View(Summ)
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
View(Summ)
Summ <- Summ[, -c(1:10, 12)]
View(Summ)
#Summary Statistics
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
Summ <- Summ[-c(1:10, 12),]
View(Summ)
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
View(Summ)
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
View(Summ)
stargazer(Summ, title = "Summary Statistics in 2005", summary = NULL)
rownames(Summ)[1] <- c("Average test scores in SSLC Exam")
?stargazer
out <- capture.output(stargazer(Summ, title = "Summary Statistics in 2005", summary = NULL, digits = 1))
out <- sub(" \\\\centering", "", out)
cat(out)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census 2011, Karnataka")
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census 2011, Karnataka")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
install.packages("xlsx")
Files <- list.files(pattern = "*.xlsx")
Files <- list.files(pattern = "*.xls")
install.packages("xlsReadWrite")
library(xlsx)
install.packages(rJava)
install.packages(xlsx)
library(xlsx)
install.packages("xlsx")
install.packages("rJava")
library(xlsx)
library(rJava)
library(rJava)
library(xlsx)
Data <- lapply(Files[1:30], read.xlsx)
?read.xlsx
Data <- lapply(Files[1:30], read.xlsx(,sheetIndex = 1))
Data <- lapply(Files[1:30], read.csv)
warnings()
Data[[1]]
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
Data <- ldply(lapply(Files[1:30], read.csv))
colnames(Data)
Data <- droplevels(subset(Data, eval(Level == "CD Block")))
View(Data)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(rJava)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[1:30], read.csv))
View(Data)
Data <- droplevels(subset(Data, eval(Data$Level == "CD Block")))
Data <- ldply(lapply(Files[1:30], read.csv))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))
View(Data)
colnames(Data)
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
View(Data)
Data <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
View(Data)
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- ldply(lapply(Files[1:30], read.csv))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
Rural <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Rural")))
Urban <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Urban")))
View(Urban)
write.csv(Total, "Total.csv")
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(rJava)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(rJava)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[1:30], read.csv))
View(Data)
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Block <- ldply(lapply(Files[1:31], read.csv))
View(Block)
Block <- ldply(lapply(Files[31], read.csv))
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
library(DataCombine)
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
View(NewData)
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = FALSE)
View(NewData)
Data <- ldply(lapply(Files[1:30], read.csv(strip.white=TRUE)))
Data <- ldply(lapply(Files[1:30], strip.white, y = TRUE))
strip.white <- function(x, y){
Data <- read.csv(x, strip.white = y)
return(Data)
}
Data <- ldply(lapply(Files[1:30], strip.white, y = TRUE))
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = FALSE)
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
View(NewData)
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
Data <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
View(Total)
taluk <- c("AFZALPUR", "ALAND", "BAGEPALLY", "BANGARAPETE", "CHANNAPATNA", "CHIKKABALLAPUR", "CHINCHOLI", "CHINTAMANI", "CHITTAPUR", "DEVANAHALLI", "DODDABALLAPURA", "GOWRIBIDANUR", "GUDIBANDA", "GULBARGA NORTH", "GULBARGA SOUTH", "HOSAKOTE", "JEWARGI", "K G F", "KANAKAPURA", "KOLAR", "MAGADI", "MALUR", "MULBAGAL", "NELAMANGALA", "RAMANAGARA", "SEDAM", "SHAHAPUR", "SHORAPUR", "SIDLAGHATTA", "SRINIVASAPUR", "YADGIR")
Data$Split <- rep(0, nrow(Data))
Data[is.element(Data[,1], taluk), 88] = 1
View(Data)
Total$Split <- rep(0, nrow(Total))
Total[is.element(Total[,1], taluk), 88] = 1
View(Total)
install.packages("MatchIt")
library(MatchIt)
colnames(Total)
m.out = matchit(Split ~ No.of.Households + Total.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "jitter")
plot(m.out, type = "hist")
plot(m.out, type = "jitter")
plot(m.out, type = "hist")
colnames(Total)
m.out = matchit(Split ~ No.of.Households + Total.Population.Person + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Scheduled.Tribes.population.Person + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "jitter")
plot(m.out, type = "hist")
m.out = matchit(Split ~ No.of.Households + Total.Population.Person + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "hist")
m.out = matchit(Split ~ No.of.Households + Total.Population.Person + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Literates.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "hist")
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Literates.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
Total$SCST <- Total$Scheduled.Castes.population.Person + Total$Scheduled.Tribes.population.Person
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + SCST + Literates.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
colnames(Total)
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + SCST + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
match <- match.data(m.out)
View(match)
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
taluk <- c("AFZALPUR", "ALAND", "BAGEPALLY", "BANGARAPETE", "CHANNAPATNA", "CHIKKABALLAPUR", "CHINCHOLI", "CHINTAMANI", "CHITTAPUR", "DEVANAHALLI", "DODDABALLAPURA", "GOWRIBIDANUR", "GUDIBANDA", "GULBARGA NORTH", "GULBARGA SOUTH", "HOSAKOTE", "JEWARGI", "K G F", "KANAKAPURA", "KOLAR", "MAGADI", "MALUR", "MULBAGAL", "NELAMANGALA", "RAMANAGARA", "SEDAM", "SHAHAPUR", "SHORAPUR", "SIDLAGHATTA", "SRINIVASAPUR", "YADGIR")
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
taluk <- c("AFZALPUR", "ALAND", "BAGEPALLY", "BANGARAPETE", "CHANNAPATNA", "CHIKKABALLAPUR", "CHINCHOLI", "CHINTAMANI", "CHITTAPUR", "DEVANAHALLI", "DODDABALLAPURA", "GOWRIBIDANUR", "GUDIBANDA", "GULBARGA NORTH", "GULBARGA SOUTH", "HOSAKOTE", "JEWARGI", "K G F", "KANAKAPURA", "KOLAR", "MAGADI", "MALUR", "MULBAGAL", "NELAMANGALA", "RAMANAGARA", "SEDAM", "SHAHAPUR", "SHORAPUR", "SIDLAGHATTA", "SRINIVASAPUR", "YADGIR")
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
Data <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
Total$Split <- rep(0, nrow(Total))
Total[is.element(Total[,1], taluk), 88] = 1
Total$SCST <- Total$Scheduled.Castes.population.Person + Total$Scheduled.Tribes.population.Person
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + SCST + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
match <- match.data(m.out)
View(match)
write.csv(match, "Z2.csv")
all.taluks <- match[,1]
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
Files <- list.files(pattern = "*.csv")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
Data <- droplevels(subset(Data, eval(is.element(Block_Name, all.taluks))))
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
#Print the Summary Stats
stargazer(Summ, title = "Summary Statistics in 2005", summary = NULL)
write.csv(match, "D:/Share Point/OneDrive/GitHub/greek-salad/Z2.csv")
all.taluks <- ldply(lapply(Files[6], read.csv))[,2]
Files <- list.files(pattern = "*.csv")
all.taluks <- ldply(lapply(Files[6], read.csv))[,2]
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
View(Total)
colnames(Total)
Total <- Total[, c(1, 3, 4, 7, 16, 22, 88)]
colnames(Total) <- c("Block_Name", "Households", "TotPop", "Pop0-6", "Literates", "TotWPop", "SCST")
write.csv(Total, "Z1.csv")
read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
View(Dataset)
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
View(Dataset)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
View(Dataset)
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
View(Dataset)
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- droplevels(subset(Dataset, eval(Year == 2007)))
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2007)))
Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
View(Dataset)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2011)))
#Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
