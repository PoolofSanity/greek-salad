return(x)
}
Data <- ldply(lapply(Files[1:30], read.csv))
View(Data)
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Block <- ldply(lapply(Files[1:31], read.csv))
View(Block)
Block <- ldply(lapply(Files[31], read.csv))
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
library(DataCombine)
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
View(NewData)
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = FALSE)
View(NewData)
Data <- ldply(lapply(Files[1:30], read.csv(strip.white=TRUE)))
Data <- ldply(lapply(Files[1:30], strip.white, y = TRUE))
strip.white <- function(x, y){
Data <- read.csv(x, strip.white = y)
return(Data)
}
Data <- ldply(lapply(Files[1:30], strip.white, y = TRUE))
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = FALSE)
NewData <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
View(NewData)
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
Data <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
View(Total)
taluk <- c("AFZALPUR", "ALAND", "BAGEPALLY", "BANGARAPETE", "CHANNAPATNA", "CHIKKABALLAPUR", "CHINCHOLI", "CHINTAMANI", "CHITTAPUR", "DEVANAHALLI", "DODDABALLAPURA", "GOWRIBIDANUR", "GUDIBANDA", "GULBARGA NORTH", "GULBARGA SOUTH", "HOSAKOTE", "JEWARGI", "K G F", "KANAKAPURA", "KOLAR", "MAGADI", "MALUR", "MULBAGAL", "NELAMANGALA", "RAMANAGARA", "SEDAM", "SHAHAPUR", "SHORAPUR", "SIDLAGHATTA", "SRINIVASAPUR", "YADGIR")
Data$Split <- rep(0, nrow(Data))
Data[is.element(Data[,1], taluk), 88] = 1
View(Data)
Total$Split <- rep(0, nrow(Total))
Total[is.element(Total[,1], taluk), 88] = 1
View(Total)
install.packages("MatchIt")
library(MatchIt)
colnames(Total)
m.out = matchit(Split ~ No.of.Households + Total.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "jitter")
plot(m.out, type = "hist")
plot(m.out, type = "jitter")
plot(m.out, type = "hist")
colnames(Total)
m.out = matchit(Split ~ No.of.Households + Total.Population.Person + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Scheduled.Tribes.population.Person + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "jitter")
plot(m.out, type = "hist")
m.out = matchit(Split ~ No.of.Households + Total.Population.Person + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "hist")
m.out = matchit(Split ~ No.of.Households + Total.Population.Person + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Literates.Population.Person, data = Total, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "hist")
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + Scheduled.Castes.population.Person + Literates.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
Total$SCST <- Total$Scheduled.Castes.population.Person + Total$Scheduled.Tribes.population.Person
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + SCST + Literates.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
colnames(Total)
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + SCST + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
match <- match.data(m.out)
View(match)
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
taluk <- c("AFZALPUR", "ALAND", "BAGEPALLY", "BANGARAPETE", "CHANNAPATNA", "CHIKKABALLAPUR", "CHINCHOLI", "CHINTAMANI", "CHITTAPUR", "DEVANAHALLI", "DODDABALLAPURA", "GOWRIBIDANUR", "GUDIBANDA", "GULBARGA NORTH", "GULBARGA SOUTH", "HOSAKOTE", "JEWARGI", "K G F", "KANAKAPURA", "KOLAR", "MAGADI", "MALUR", "MULBAGAL", "NELAMANGALA", "RAMANAGARA", "SEDAM", "SHAHAPUR", "SHORAPUR", "SIDLAGHATTA", "SRINIVASAPUR", "YADGIR")
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
taluk <- c("AFZALPUR", "ALAND", "BAGEPALLY", "BANGARAPETE", "CHANNAPATNA", "CHIKKABALLAPUR", "CHINCHOLI", "CHINTAMANI", "CHITTAPUR", "DEVANAHALLI", "DODDABALLAPURA", "GOWRIBIDANUR", "GUDIBANDA", "GULBARGA NORTH", "GULBARGA SOUTH", "HOSAKOTE", "JEWARGI", "K G F", "KANAKAPURA", "KOLAR", "MAGADI", "MALUR", "MULBAGAL", "NELAMANGALA", "RAMANAGARA", "SEDAM", "SHAHAPUR", "SHORAPUR", "SIDLAGHATTA", "SRINIVASAPUR", "YADGIR")
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
Data <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
Total$Split <- rep(0, nrow(Total))
Total[is.element(Total[,1], taluk), 88] = 1
Total$SCST <- Total$Scheduled.Castes.population.Person + Total$Scheduled.Tribes.population.Person
m.out = matchit(Split ~ No.of.Households + Population.in.the.age.group.0.6.Person + SCST + Literates.Population.Person + Total.Worker.Population.Person, data = Total, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
match <- match.data(m.out)
View(match)
write.csv(match, "Z2.csv")
all.taluks <- match[,1]
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
Files <- list.files(pattern = "*.csv")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
View(Data)
Data <- droplevels(subset(Data, eval(is.element(Block_Name, all.taluks))))
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
#Print the Summary Stats
stargazer(Summ, title = "Summary Statistics in 2005", summary = NULL)
write.csv(match, "D:/Share Point/OneDrive/GitHub/greek-salad/Z2.csv")
all.taluks <- ldply(lapply(Files[6], read.csv))[,2]
Files <- list.files(pattern = "*.csv")
all.taluks <- ldply(lapply(Files[6], read.csv))[,2]
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
View(Total)
colnames(Total)
Total <- Total[, c(1, 3, 4, 7, 16, 22, 88)]
colnames(Total) <- c("Block_Name", "Households", "TotPop", "Pop0-6", "Literates", "TotWPop", "SCST")
write.csv(Total, "Z1.csv")
read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
View(Dataset)
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
View(Dataset)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
View(Dataset)
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
View(Dataset)
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- droplevels(subset(Dataset, eval(Year == 2007)))
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2007)))
Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
View(Dataset)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2011)))
#Dataset <- FindReplace(data = Dataset, Var = "Block_Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
ssa <- ldply(lapply(Files[2], read.csv))[-1]
taluk.all <- unique(ssa[,1])
sslc <- ldply(lapply(Files[4], read.csv))[,-c(1,3:5)]
colnames(sslc)[1] <- "Block_Name"
sslc <- droplevels(subset(sslc, eval(is.element(sslc$Block_Name, taluk.all))))
View(sslc)
sslc$Block_Name
source('D:/Share Point/OneDrive/GitHub/greek-salad/CensusPrep.R')
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
Data <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
View(Block)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
View(Block)
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))[,-1]
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Data <- droplevels(subset(Data, eval(is.element(Name, Block[,1]))))
View(Block)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
Block <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))[,-1]
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
View(Data)
Data <- FindReplace(data = Data, Var = "Name", replaceData = Block, from = "Old", to = "New", exact = TRUE)
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/Comprehensive Exam - Data files/Census")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(DataCombine)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
Data <- ldply(lapply(Files[1:30], read.csv, strip.white = TRUE))
Data <- droplevels(subset(Data, eval(Level == "CD BLOCK")))[,-c(0:9)]
Total <- droplevels(subset(Data, eval(Data$Total.Rural.Urban == "Total")))
Total$SCST <- Total$Scheduled.Castes.population.Person + Total$Scheduled.Tribes.population.Person
Total <- Total[, c(1, 3, 4, 7, 16, 22, 88)]
colnames(Total) <- c("Block_Name", "Households", "TotPop", "Pop0-6", "Literates", "TotWPop", "SCST")
View(Total)
Files <- list.files(pattern = "*.csv")
Data <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))
View(Data)
Data <- ldply(lapply(Files[31], read.csv, strip.white = TRUE))[,-1]
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- data.frame(merge(Dataset, Total, by = "Block_Name"))
View(Dataset)
Dataset <- read.csv("D:/Share Point/OneDrive/GitHub/greek-salad/timey-wimey.csv")
Dataset <- droplevels(subset(Dataset, eval(Year == 2005)))
Dataset <- data.frame(merge(Dataset, Data, by = "Block_Name"))
View(Dataset)
write.csv(Dataset, "D:/Share Point/OneDrive/GitHub/greek-salad/Z0-Baseline.csv")
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
Files
Data <- ldply(lapply(Files[6], read.csv))[,-c(1)]
View(Data)
Data <- ldply(lapply(Files[6], read.csv))[,-c(1, 3)]
View(Data)
library(MatchIt)
colnames(DAta)
colnames(Data)
m.out <- matchit(Split ~ Total + No_of_Working_Days + No_of_Acad_Inspection + Electricity + Graduate_Teachers + Tch_with_Prof_Qual + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 2)
summary(m.out)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + No_of_Working_Days + Electricity + Graduate_Teachers + Tch_with_Prof_Qual + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + Electricity + Graduate_Teachers + Tch_with_Prof_Qual + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + Electricity + Graduate_Teachers + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + Graduate_Teachers + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 2)
plot(m.out, type = "hist")
install.packages(optmatch)
install.packages(optmatch)
install.packages("optmatch")
library(optmatch)
m.out <- matchit(Split ~ Total + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "optimal", ratio = 2)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + Electricity + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "optimal", ratio = 2)
m.out <- matchit(Split ~ Total + Electricity + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "optimal", ratio = 1)
colnames(Data)
m.out <- matchit(Split ~ Total + Electricity + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "optimal", ratio = 1)
m.out <- matchit(Split ~ Total + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "optimal", ratio = 1)
m.out <- matchit(Split ~ Total + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
m.out <- matchit(Split ~ Total + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "optimal", ratio = 1)
m.out <- matchit(Split ~ Total + Public + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
summary(m.out)
plot(m.out, type = "jitter")
plot(m.out, type = "jitter")
match <- match.data(m.out)
Files
write.csv(match, "Z1-Matched.csv")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
all.taluks <- ldply(lapply(Files[7], read.csv))[,2]
Files <- list.files(pattern = "*.csv")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
#The variable all.taluks is from the environment of CensusPrep.R - Run that first! (or read it in from Z2.csv)
all.taluks <- ldply(lapply(Files[7], read.csv))[,2]
Data <- droplevels(subset(Data, eval(is.element(Block_Name, all.taluks))))
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
#Print the Summary Stats
stargazer(Summ, title = "Summary Statistics in 2005", summary = NULL)
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
colnames(Data)
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
#From this point on:
#
#Everything that exists is an object.
#Everything that happens is a function call.
setwd("D:/Share Point/OneDrive/GitHub/greek-salad")
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
library(MatchIt)
library(optmatch)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
#Initializing Functions
na.zero <- function (x) {
x[is.na(x)] <- 999
return(x)
}
#Propensity Score Matching
Data <- ldply(lapply(Files[6], read.csv))[,-c(1, 3)]
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Male_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + TLM_Grant_Recd + School_Dev_Grant_Recd + Public + Graduate_Teachers + Days_involved_in_non_tch_assgn + Tch_with_Prof_Qual + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Male_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Days_involved_in_non_tch_assgn + Tch_with_Prof_Qual + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Days_involved_in_non_tch_assgn + Tch_with_Prof_Qual + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Days_involved_in_non_tch_assgn + Tch_with_Prof_Qual + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
summary(m.out)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Tch_with_Prof_Qual + Households + TotPop + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Tch_with_Prof_Qual + Households + Pop0.6 + Literates + TotWPop + SCST, data = Data, method = "nearest", ratio = 1)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Tch_with_Prof_Qual + Households + Pop0.6 + Literates + SCST, data = Data, method = "nearest", ratio = 1)
plot(m.out, type = "hist")
m.out <- matchit(Split ~ Total + No_of_Working_Days + Female_Tch + Electricity + Tot_Clrooms + No_of_Acad_Inspection + Public + Graduate_Teachers + Households + Pop0.6 + Literates + SCST, data = Data, method = "nearest", ratio = 1)
plot(m.out, type = "hist")
Data <- ldply(lapply(Files[6], read.csv))[,-c(1, 3)]
m.out <- matchit(Split ~ Total + Female_Tch + Electricity + Public + Graduate_Teachers + Households + Pop0.6 + Literates + SCST, data = Data, method = "nearest", ratio = 1)
summary(m.out)
#plot(m.out, type = "jitter")
plot(m.out, type = "hist")
match <- match.data(m.out)
write.csv(match, "Z1-Matched.csv")
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
#The variable all.taluks is from the environment of CensusPrep.R - Run that first! (or read it in from Z2.csv)
all.taluks <- ldply(lapply(Files[7], read.csv))[,2]
Data <- droplevels(subset(Data, eval(is.element(Block_Name, all.taluks))))
#Summary Statistics
#Baseline
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
#Endline
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2013))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
#Print the Summary Stats
colnames(Data)
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
m.out <- matchit(Split ~ Total + Female_Tch + Electricity + Public + Graduate_Teachers + Households + Pop0.6 + Literates + SCST, data = Data, method = "optimal", ratio = 1)
m.out <- matchit(Split ~ Total + Female_Tch + Electricity + Public + Graduate_Teachers + Households + Pop0.6 + Literates + SCST, data = Data, method = "optimal", ratio = 1)
?matchit
m.out <- matchit(Split ~ Total + Female_Tch + Electricity + Public + Graduate_Teachers + Households + Pop0.6 + Literates + SCST, data = Data, method = "optimal", ratio = 1, discard = "both")
m.out <- matchit(Split ~ Total + Female_Tch + Electricity + Public + Graduate_Teachers + Households + Pop0.6 + Literates + SCST, data = Data, method = "nearest", ratio = 1, discard = "both")
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
plot(m.out, type = "hist")
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
colnames(Data)
colnames(Data)
# Chunk 1: clip0
#Everything that exists is an object.
#Everything that happens is a function call.
library(foreign)
library(stargazer)
library(plyr)
library(reshape)
options(scipen = 999, digits=2)
Files <- list.files(pattern = "*.csv")
# Chunk 2: Appendix
#Summary Table
Appendix <- ldply(lapply(Files[1], read.csv))[,-1]
stargazer(Appendix, title = "No of Schools District-wise, across the years", summary = FALSE, digits = 1, font.size = "footnotesize")
# Chunk 3: App1
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
#The variable all.taluks is from the environment of CensusPrep.R - Run that first! (or read it in from Z2.csv)
all.taluks <- ldply(lapply(Files[7], read.csv))[,2]
Data <- droplevels(subset(Data, eval(is.element(Block_Name, all.taluks))))
colnames(Data) <- c("Block_Name", "Year", "Marks1", "Marks2", "Marks3", "Marks4", "Marks5", "Marks6", "TotalMarks", "Dist_Name", "Rural", "WorkDays",  "AcadInsp", "DevGrantR", "DevGrantE", "TLMGrantR", "TLMGrantE", "Classrooms", "ToiletG", "Electricity", "Library", "PlayGround", "Male_Tch", "Female_Tch", "Grad_Tch", "ProfQ_Tch", "Days_nonTch", "Public", "Split")
#Summary Statistics
#Baseline
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2005))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
rownames(Summ)[1] <- c("Average test scores in SSLC Exam")
#Print the Summary Stats
stargazer(Summ, title = "Summary Statistics in 2005", summary = NULL, digits = 1)
#Endline
Summ <- aggregate(Data, by = list(Data$Year, Data$Split), mean)
Summ <- t(droplevels(subset(Summ, eval(Year == 2013))))
Summ <- Summ[-c(1:10, 12),]
colnames(Summ) <- c("Undivided", "Divided")
#Print the Summary Stats
stargazer(Summ, title = "Summary Statistics in 2013", summary = NULL, digits = 1)
fit.total <- lm(Total ~ Split*Year, Data)
fit.WDays <- lm(No_of_Working_Days ~ Split*Year, Data)
fit.DevGrant <- lm(School_Dev_Grant_Recd ~ Split*Year, Data)
stargazer(fit.total, fit.WDays, fit.DevGrant)
colnames(Data)
View(Data)
sort(unique(Data$DevGrantR))
colnames(Data)
stargazer(fit.total, fit.WDays, fit.DevGrant, fit.AcdInsp, digits = 1)
stargazer(fit.total, fit.WDays, fit.DevGrant, fit.AcdInsp, digits = 1)
?stargazer
View(Data)
sort(unique(Data$TLMGrantR))
colnames(Data)
Data <- ldply(lapply(Files[5], read.csv))[,-c(1, 29)]
all.taluks <- ldply(lapply(Files[7], read.csv))[,2]
Data <- droplevels(subset(Data, eval(is.element(Block_Name, all.taluks))))
source('D:/Share Point/OneDrive/GitHub/greek-salad/Regressions.R')
plot(m.out, type = "hist")
